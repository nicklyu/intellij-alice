buildscript {
    ext.ktor_version = '1.1.3'
    ext.kotlin_version = '1.3.21'
    ext.logback_version = '1.2.1'

    repositories {
        mavenCentral()
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }

}


group 'intellij-voice'
version '0.0.1'

apply plugin: 'kotlin'
apply plugin: 'application'


repositories {
    mavenCentral()
    maven { url "https://kotlin.bintray.com/ktor" }
}


mainClassName = 'io.ktor.server.netty.DevelopmentEngine'

sourceCompatibility = 1.8


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "io.ktor:ktor-server-netty:$ktor_version"
    compile "io.ktor:ktor-websockets:$ktor_version"
    compile "io.ktor:ktor-gson:$ktor_version"

    compile "ch.qos.logback:logback-classic:$logback_version"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Scarlett server',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task stage(dependsOn: ['fatJar','build', 'clean'])
build.mustRunAfter clean
fatJar.mustRunAfter build

task copyToLib(type: Copy) {
    into "$buildDir/lib"
    from(configurations.compile)
}



stage.dependsOn(copyToLib)